from music21 import converter, instrument, note, chord, stream
import glob
import numpy
from keras.utils import np_utils
import tensorflow as ts


numpy.random.seed()

notes = []
print("Starting to read files...")
for file in glob.glob("midi_songs/*.mid"):
    midi = converter.parse(file)
    notes_to_parse = None
    parts = instrument.partitionByInstrument(midi)
    if parts: # file has instrument parts
        notes_to_parse = parts.parts[0].recurse()
    else: # file has notes in a flat structure
        notes_to_parse = midi.flat.notes
    for element in notes_to_parse:
        if isinstance(element, note.Note):
            notes.append(str(element.pitch))
        elif isinstance(element, chord.Chord):
            notes.append('.'.join(str(n) for n in element.normalOrder))


print("Generating the dictionary and converting the notes to integers...")
n_vocab = len(set(notes))
sequence_length = 100
# get all pitch names
pitchnames = sorted(set(item for item in notes))
# create a dictionary to map pitches to integers
note_to_int = dict((note, number) for number, note in enumerate(pitchnames))
network_input = []
network_output = []
# create input sequences and the corresponding outputs
for i in range(0, len(notes) - sequence_length, 1):
    sequence_in = notes[i:i + sequence_length]
    sequence_out = notes[i + sequence_length]
    network_input.append([note_to_int[char] for char in sequence_in])
    network_output.append(note_to_int[sequence_out])
    
n_patterns = len(network_input)
# reshape the input into a format compatible with LSTM layers
network_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
# normalize input
network_input = network_input / float(n_vocab)
network_output = np_utils.to_categorical(network_output)


print("Building the LSTM...")
model = ts.keras.Sequential()
model.add(ts.keras.layers.LSTM(
    256,
    input_shape=(network_input.shape[1], network_input.shape[2]),
    return_sequences=True
))
model.add(ts.keras.layers.Dropout(0.3))
model.add(ts.keras.layers.LSTM(512, return_sequences=True))
model.add(ts.keras.layers.Dropout(0.3))
model.add(ts.keras.layers.LSTM(256))
model.add(ts.keras.layers.Dense(256))
model.add(ts.keras.layers.Dropout(0.3))
model.add(ts.keras.layers.Dense(n_vocab))
model.add(ts.keras.layers.Activation('softmax'))
model.compile(loss='categorical_crossentropy', optimizer='rmsprop')


print("Filing the LSTM weights with a pre trained LSTM...")
model.load_weights('GPU3-weights-improvement-193-0.0042-bigger.hdf5')


print("Generating song...")
for i in range(10):
    start = numpy.random.randint(0, len(network_input)-1)
    print("Song number " + str(i) + ' being generated with seed ' + str(start))
    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
    pattern = network_input[start]
    prediction_output = []
    # generate 500 notes
    for note_index in range(500):
        print("Prediction output number " + str(note_index))
        prediction_input = numpy.reshape(pattern, (1, len(pattern),1))
        prediction_input = prediction_input / float(n_vocab)
        prediction = model.predict(prediction_input, verbose=0)
        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)
        pattern = numpy.append(pattern,index)
        #numpy.concatenate(pattern, index)
        pattern = pattern[1:len(pattern)]
        
        
        
    
    offset = 0
    output_notes = []
    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        # increase offset each iteration so that notes do not stack
        offset += 0.5
        print("Putting stuff together " + str(offset))
        
        
    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='GPU_test_output3'+ str(i) + '.mid')
    midi_stream.show()
    print("Song number " + str(i) + ' finished')




